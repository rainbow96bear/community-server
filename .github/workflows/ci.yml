# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  test-build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Setup node.js 14.x
      uses: actions/setup-node@v3
      with:
        node-version: 14.x
        cache: 'yarn'
    - run: yarn install
    - run: yarn build
    - run: yarn start

  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js 18.x
      uses: actions/setup-node@v2
      with:
        node-version: '18.x'
    - name: Docker build
      run: |
        docker login -u ${{ secrets.DOCKER_HUB_ID }} -p ${{ secrets.DOCKER_HUB_PW }}
        docker build --platform linux/amd64 -t community-server .
        docker tag community-server ${{ secrets.DOCKER_HUB_ID }}/community-server:${GITHUB_SHA::7}
        docker push ${{ secrets.DOCKER_HUB_ID }}/community-server:${GITHUB_SHA::7}
  
  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Build and deploy
      run: |
          echo "$SSH_PEM_KEY" >> $HOME/key.pem
          chmod 400 $HOME/key.pem
          ssh -i $HOME/key.pem -o StrictHostKeyChecking=no ${SSH_USER}@${SSH_KNOWN_HOSTS} '~/script.sh'
          docker login -u "${{ secrets.DOCKER_HUB_ID }}" -p "${{ secrets.DOCKER_HUB_PW }}"
          docker pull ${{ secrets.DOCKER_HUB_ID }}/community-server:${GITHUB_SHA::7}
          docker run -d -p 8000:8000 ${{ secrets.DOCKER_HUB_ID }}/community-server:${GITHUB_SHA::7}
      env:
          SSH_USER: ${{ secrets.EC2_USER }}
          SSH_KNOWN_HOSTS: ${{ secrets.EC2_HOST }}
          SSH_PEM_KEY: ${{ secrets.EC2_SSH_KEY }}

name: Node.js CI

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js 18.x
        uses: actions/setup-node@v2
        with:
          node-version: "18.x"
      - name: Set up environment variables for build
        run: |
                    docker build --platform linux/amd64 \
            --build-arg COMMUNITY_URL=${{ secrets.COMMUNITY_URL }} \
            --build-arg DB_USERNAME=${{ secrets.DB_USERNAME }} \
            --build-arg DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
            --build-arg DB_DBNAME=${{ secrets.DB_DBNAME }} \
            --build-arg DB_HOST=${{ secrets.DB_HOST }} \
            --build-arg PRODUCT_DB_HOST=${{ secrets.PRODUCT_DB_HOST }} \
            --build-arg DB_PORT=${{ secrets.DB_PORT }} \
            --build-arg PORT=${{ secrets.PORT }} \
            --build-arg SESSION_SECRET=${{ secrets.SESSION_SECRET }} \
            --build-arg IMG_SERVER_URL=${{ secrets.IMG_SERVER_URL }} \
            --build-arg NODE_ENV=${{ secrets.NODE_ENV }} \
            -t community-server .
      - name: Login to Docker Hub
        run: echo ${{ secrets.DOCKER_HUB_PW }} | docker login -u ${{ secrets.DOCKER_HUB_ID }} --password-stdin

      - name: Docker build and push
        run: |
          docker tag community-server ${{ secrets.DOCKER_HUB_ID }}/community-server:latest
          docker push ${{ secrets.DOCKER_HUB_ID }}/community-server:latest
  mysql:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3.3.0
      - name: Deploy Docker container
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            echo ${{ secrets.DOCKER_HUB_PW }} | sudo docker login -u ${{ secrets.DOCKER_HUB_ID }} --password-stdin
            # MySQL 컨테이너가 실행 중인지 확인
            if [ ! "$(sudo docker ps -q -f name=community-mysql)" ]; then
              if [ "$(sudo docker ps -aq -f status=exited -f name=community-mysql)" ]; then
                # 중지된 MySQL 컨테이너가 있으면 제거
                sudo docker rm community-mysql
              fi
              # MySQL 컨테이너 실행
              sudo docker run -d --name community-mysql \
                --network host \
                -e MYSQL_ROOT_PASSWORD=${{ secrets.DB_PASSWORD }} \
                -e MYSQL_DATABASE=its-playground \
                -p 3306:3306 \
                mysql:5.7
            fi
  deploy:
    needs: mysql
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3.3.0
      - name: Deploy Docker container
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            echo ${{ secrets.DOCKER_HUB_PW }} | sudo docker login -u ${{ secrets.DOCKER_HUB_ID }} --password-stdin
            sudo docker pull ${{ secrets.DOCKER_HUB_ID }}/community-server:latest
            sudo docker stop community-server || true
            sudo docker rm community-server || true
            sudo docker run -d --name community-server --network host \
            -e COMMUNITY_URL=${{ secrets.COMMUNITY_URL }} \
            -e DB_USERNAME=${{ secrets.DB_USERNAME }} \
            -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
            -e DB_DBNAME=${{ secrets.DB_DBNAME }} \
            -e DB_HOST=${{ secrets.DB_HOST }} \
            -e PRODUCT_DB_HOST=${{ secrets.PRODUCT_DB_HOST }} \
            -e DB_PORT=${{ secrets.DB_PORT }} \
            -e PORT=${{ secrets.PORT }} \
            -e SESSION_SECRET=${{ secrets.SESSION_SECRET }} \
            -e IMG_SERVER_URL=${{ secrets.IMG_SERVER_URL }} \
            -e KAKAO_RESTFUL_API_KEY=${{ secrets.KAKAO_RESTFUL_API_KEY }} \
            -e KAKAO_CLIENT_SECRET=${{ secrets.KAKAO_CLIENT_SECRET }} \
            -e KAKAO_REDIRECT_URI=${{ secrets.KAKAO_REDIRECT_URI }} \
            ${{ secrets.DOCKER_HUB_ID }}/community-server:latest
